{"version":3,"sources":["api/api.js","api/post.js","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","api/comments.js","components/PostDetails/PostDetails.jsx","App.jsx","api/users.js","index.js"],"names":["BASE_URL","request","url","method","fetch","then","response","json","res","data","getPost","postId","PostsList","selectedUser","postEdited","selectedPost","useState","posts","setPosts","useEffect","userId","className","map","post","key","id","title","type","classNames","active","onClick","NewCommentForm","onAdd","name","setName","email","setEmail","body","setBody","clearForm","onSubmit","event","preventDefault","placeholder","value","onChange","target","getComments","deleteComment","commentId","addComment","JSON","stringify","PostDetails","setPost","comments","setComments","isVisible","setVisible","Promise","all","loadedPost","loadedComments","deleteCommentHandler","a","length","newComment","addedCom","prevCom","App","users","setUsers","setSelectedUser","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cbd813a6.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, method = {}) => fetch(BASE_URL + url, method)\n  .then(response => response.json())\n  .then(res => res.data);\n\nexport const post = (url, body) => request(url, {\n  method: 'POST',\n  body: JSON.stringify(body),\n});\n","import { request } from './api';\n\nexport function getUserPosts(userId) {\n  return request(`/posts?userId=${userId}`);\n}\n\nexport function getPosts() {\n  return request('/posts');\n}\n\nexport function getPost(postId) {\n  return request(`/posts/${postId}`);\n}\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport { getPosts, getUserPosts } from '../../api/post';\nimport './PostsList.scss';\n\nexport const PostsList = ({ selectedUser, postEdited, selectedPost }) => {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    if (selectedUser) {\n      getUserPosts(selectedUser).then(setPosts);\n    } else {\n      getPosts().then(setPosts);\n    }\n  }, [selectedUser]);\n\n  const postHandler = (postId) => {\n    if (postId === selectedPost) {\n      postEdited(null);\n    } else {\n      postEdited(postId);\n    }\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            className=\"PostsList__item\"\n            key={post.id}\n          >\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className={classNames(\n                'PostsList__button button',\n                { active: post.id === selectedPost },\n              )}\n              onClick={() => postHandler(post.id)}\n            >\n              {selectedPost === post.id ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  selectedUser: PropTypes.number.isRequired,\n  postEdited: PropTypes.func.isRequired,\n  selectedPost: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport PropTypes from 'prop-types';\n\nexport const NewCommentForm = ({ postId, onAdd }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    onAdd({\n      name,\n      body,\n      email,\n      postId,\n    });\n\n    clearForm();\n  };\n\n  const clearForm = () => {\n    setBody('');\n    setName('');\n    setEmail('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={submitHandler}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={({ target }) => setName(target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={({ target }) => setEmail(target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={({ target }) => setBody(target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  onAdd: PropTypes.func.isRequired,\n};\n","import { post, request } from './api';\n\nexport const getComments = postId => request(`/comments?postId=${postId}`);\n\nexport const deleteComment = commentId => request(`/comments/${commentId}`, {\n  method: 'DELETE',\n});\n\nexport const addComment = body => post(`/comments`, body);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPost } from '../../api/post';\nimport { addComment, getComments, deleteComment } from '../../api/comments';\n\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ postId }) => {\n  const [post, setPost] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [isVisible, setVisible] = useState(true);\n\n  useEffect(() => {\n    if (!postId) {\n      setPost(null);\n\n      return;\n    }\n\n    Promise.all([getPost(postId), getComments(postId)])\n      .then(([loadedPost, loadedComments]) => {\n        setPost(loadedPost);\n        setComments(loadedComments);\n      });\n  }, [postId]);\n\n  const addNewComment = (newComment) => {\n    addComment(newComment)\n      .then(addedCom => setComments(prevCom => [...prevCom, addedCom]));\n  };\n\n  const deleteCommentHandler = async(commentId) => {\n    deleteComment(commentId)\n      .then(() => getComments(postId))\n      .then(setComments);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n\n      {!post ? (\n        <h2>Select a post</h2>\n      ) : (\n        <>\n          <h2>Post details:</h2>\n          <section className=\"PostDetails__post\">\n            <p>{post.body}</p>\n          </section>\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => setVisible(value => !value)}\n            >\n              {isVisible\n                ? `Hide ${comments.length} comments`\n                : `Show  ${comments.length} comments`\n            }\n            </button>\n            <ul className=\"PostDetails__list\">\n              {isVisible && comments.map(({ id, body }) => (\n                <li\n                  key={id}\n                  className=\"PostDetails__list-item\"\n                >\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => deleteCommentHandler(id)}\n                  >\n                    X\n                  </button>\n                  <p>{body}</p>\n                </li>\n              ))}\n            </ul>\n          </section>\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                postId={postId}\n                onAdd={addNewComment}\n              />\n            </div>\n          </section>\n        </>\n      )}\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/users';\n\nconst App = () => {\n  const [users, setUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [selectedPost, setPost] = useState(0);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={event => setSelectedUser(event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUser={selectedUser}\n            postEdited={setPost}\n            selectedPost={selectedPost}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails postId={selectedPost} />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { request } from './api';\n\nexport const getUsers = () => request('/users');\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}